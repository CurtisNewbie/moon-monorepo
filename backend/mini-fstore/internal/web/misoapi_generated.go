// auto generated by misoapi v0.1.20 at 2025/04/14 22:54:04 (CST), please do not modify
package web

import (
	"github.com/curtisnewbie/mini-fstore/api"
	"github.com/curtisnewbie/mini-fstore/internal/fstore"
	"github.com/curtisnewbie/miso/miso"
)

func init() {
	miso.RawGet("/file/stream", ApiTempKeyStreamFile).
		Extra(miso.ExtraName, "ApiTempKeyStreamFile").
		Desc(`Media streaming using temporary file key, the file_key's ttl is extended with each subsequent request. This endpoint is expected to be accessible publicly without authorization, since a temporary file_key is generated and used.`).
		Public().
		DocQueryParam("key", "temporary file key")

	miso.RawGet("/file/raw", ApiTempKeyDownloadFile).
		Extra(miso.ExtraName, "ApiTempKeyDownloadFile").
		Desc(`Download file using temporary file key. This endpoint is expected to be accessible publicly without authorization, since a temporary file_key is generated and used.`).
		Public().
		DocQueryParam("key", "temporary file key")

	miso.Put("/file",
		func(inb *miso.Inbound) (string, error) {
			return ApiUploadFile(inb)
		}).
		Extra(miso.ExtraName, "ApiUploadFile").
		Desc(`Upload file. A temporary file_id is returned, which should be used to exchange the real file_id`).
		Resource(ResCodeFstoreUpload).
		DocHeader("filename", "name of the uploaded file")

	miso.IGet("/file/info",
		func(inb *miso.Inbound, req FileInfoReq) (api.FstoreFile, error) {
			return ApiGetFileInfo(inb, req)
		}).
		Extra(miso.ExtraName, "ApiGetFileInfo").
		Desc(`Fetch file info`)

	miso.IGet("/file/key",
		func(inb *miso.Inbound, req DownloadFileReq) (string, error) {
			return ApiGenFileKey(inb, req)
		}).
		Extra(miso.ExtraName, "ApiGenFileKey").
		Desc(`Generate temporary file key for downloading and streaming. This endpoint is expected to be called internally by another backend service that validates the ownership of the file properly.`)

	miso.RawGet("/file/direct", ApiDirectDownloadFile).
		Extra(miso.ExtraName, "ApiDirectDownloadFile").
		Desc(`Download files directly using file_id. This endpoint is expected to be protected and only used internally by another backend service. Users can eaily steal others file_id and attempt to download the file, so it's better not be exposed to the end users.`).
		DocQueryParam("fileId", "actual file_id of the file record")

	miso.IDelete("/file",
		func(inb *miso.Inbound, req DeleteFileReq) (any, error) {
			return ApiDeleteFile(inb, req)
		}).
		Extra(miso.ExtraName, "ApiDeleteFile").
		Desc(`Mark file as deleted.`)

	miso.IPost("/file/unzip",
		func(inb *miso.Inbound, req api.UnzipFileReq) (any, error) {
			return ApiUnzipFile(inb, req)
		}).
		Extra(miso.ExtraName, "ApiUnzipFile").
		Desc(`Unzip archive, upload all the zip entries, and reply the final results back to the caller asynchronously`)

	miso.IPost("/backup/file/list",
		func(inb *miso.Inbound, req fstore.ListBackupFileReq) (fstore.ListBackupFileResp, error) {
			return ApiBackupListFiles(inb, req)
		}).
		Extra(miso.ExtraName, "ApiBackupListFiles").
		Desc(`Backup tool list files`).
		Public().
		DocHeader("Authorization", "Basic Authorization")

	miso.RawGet("/backup/file/raw", ApiBackupDownFile).
		Extra(miso.ExtraName, "ApiBackupDownFile").
		Desc(`Backup tool download file`).
		Public().
		DocHeader("Authorization", "Basic Authorization").
		DocQueryParam("fileId", "actual file_id of the file record")

	miso.Post("/maintenance/remove-deleted",
		func(inb *miso.Inbound) (any, error) {
			return ApiRemoveDeletedFiles(inb)
		}).
		Extra(miso.ExtraName, "ApiRemoveDeletedFiles").
		Desc(`Remove files that are logically deleted and not linked (symbolically)`).
		Resource(ResCodeFstoreMaintenance)

	miso.Post("/maintenance/sanitize-storage",
		func(inb *miso.Inbound) (any, error) {
			return ApiSanitizeStorage(inb)
		}).
		Extra(miso.ExtraName, "ApiSanitizeStorage").
		Desc(`Sanitize storage, remove files in storage directory that don't exist in database`).
		Resource(ResCodeFstoreMaintenance)

	miso.Post("/maintenance/compute-checksum",
		func(inb *miso.Inbound) (any, error) {
			return ApiComputeChecksum(inb)
		}).
		Extra(miso.ExtraName, "ApiComputeChecksum").
		Desc(`Compute files' checksum if absent`)

	miso.Get("/storage/info",
		func(inb *miso.Inbound) (fstore.StorageInfo, error) {
			return ApiFetchStorageInfo(inb)
		}).
		Extra(miso.ExtraName, "ApiFetchStorageInfo").
		Desc(`Fetch storage info`).
		Resource(ResCodeFstoreMaintenance)

	miso.Get("/storage/usage-info",
		func(inb *miso.Inbound) ([]fstore.StorageUsageInfo, error) {
			return ApiFetchStorageUsageInfo(inb)
		}).
		Extra(miso.ExtraName, "ApiFetchStorageUsageInfo").
		Desc(`Fetch storage usage info`).
		Resource(ResCodeFstoreMaintenance)

	miso.Get("/maintenance/status",
		func(inb *miso.Inbound) (fstore.MaintenanceStatus, error) {
			return ApiFetchMaintenanceStatus()
		}).
		Extra(miso.ExtraName, "ApiFetchMaintenanceStatus").
		Desc(`Check server maintenance status`).
		Resource(ResCodeFstoreMaintenance)

}
