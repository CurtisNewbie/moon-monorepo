// auto generated by misoapi v0.1.14-beta.3 at 2025/02/02 22:50:50, please do not modify
package web

import (
	"github.com/curtisnewbie/miso/middleware/mysql"
	"github.com/curtisnewbie/miso/middleware/user-vault/common"
	"github.com/curtisnewbie/miso/miso"
	"github.com/curtisnewbie/user-vault/api"
	"github.com/curtisnewbie/user-vault/internal/vault"
)

func init() {
	miso.IPost("/open/api/user/login",
		func(inb *miso.Inbound, req LoginReq) (string, error) {
			return ApiUserLogin(inb, req)
		}).
		Extra(miso.ExtraName, "ApiUserLogin").
		Desc("User Login using password, a JWT token is generated and returned").
		Public()

	miso.IPost("/open/api/user/register/request",
		func(inb *miso.Inbound, req vault.RegisterReq) (any, error) {
			return ApiUserRegister(inb, req)
		}).
		Extra(miso.ExtraName, "ApiUserRegister").
		Desc("User request registration, approval needed").
		Public()

	miso.IPost("/open/api/user/add",
		func(inb *miso.Inbound, req vault.AddUserParam) (any, error) {
			return ApiAdminAddUser(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminAddUser").
		Desc("Admin create new user").
		Resource(ResourceManagerUser)

	miso.IPost("/open/api/user/list",
		func(inb *miso.Inbound, req vault.ListUserReq) (miso.PageRes[api.UserInfo], error) {
			return ApiAdminListUsers(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminListUsers").
		Desc("Admin list users").
		Resource(ResourceManagerUser)

	miso.IPost("/open/api/user/info/update",
		func(inb *miso.Inbound, req vault.AdminUpdateUserReq) (any, error) {
			return ApiAdminUpdateUser(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminUpdateUser").
		Desc("Admin update user info").
		Resource(ResourceManagerUser)

	miso.IPost("/open/api/user/registration/review",
		func(inb *miso.Inbound, req vault.AdminReviewUserReq) (any, error) {
			return ApiAdminReviewUser(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminReviewUser").
		Desc("Admin review user registration").
		Resource(ResourceManagerUser)

	miso.Get("/open/api/user/info",
		func(inb *miso.Inbound) (UserInfoRes, error) {
			return ApiUserGetUserInfo(inb)
		}).
		Extra(miso.ExtraName, "ApiUserGetUserInfo").
		Desc("User get user info").
		Public()

	miso.IPost("/open/api/user/password/update",
		func(inb *miso.Inbound, req vault.UpdatePasswordReq) (any, error) {
			return ApiUserUpdatePassword(inb, req)
		}).
		Extra(miso.ExtraName, "ApiUserUpdatePassword").
		Desc("User update password").
		Resource(ResourceBasicUser)

	miso.IPost("/open/api/token/exchange",
		func(inb *miso.Inbound, req vault.ExchangeTokenReq) (string, error) {
			return ExchangeTokenEp(inb, req)
		}).
		Extra(miso.ExtraName, "ExchangeTokenEp").
		Desc("Exchange token").
		Public()

	miso.IGet("/open/api/token/user",
		func(inb *miso.Inbound, req GetTokenUserReq) (vault.UserInfoBrief, error) {
			return ApiGetTokenUserInfo(inb, req)
		}).
		Extra(miso.ExtraName, "ApiGetTokenUserInfo").
		Desc("Get user info by token. This endpoint is expected to be accessible publicly").
		Public()

	miso.IPost("/open/api/access/history",
		func(inb *miso.Inbound, req vault.ListAccessLogReq) (miso.PageRes[vault.ListedAccessLog], error) {
			return ApiUserListAccessHistory(inb, req)
		}).
		Extra(miso.ExtraName, "ApiUserListAccessHistory").
		Desc("User list access logs").
		Resource(ResourceBasicUser)

	miso.IPost("/open/api/user/key/generate",
		func(inb *miso.Inbound, req vault.GenUserKeyReq) (any, error) {
			return ApiUserGenUserKey(inb, req)
		}).
		Extra(miso.ExtraName, "ApiUserGenUserKey").
		Desc("User generate user key").
		Resource(ResourceBasicUser)

	miso.IPost("/open/api/user/key/list",
		func(inb *miso.Inbound, req vault.ListUserKeysReq) (miso.PageRes[vault.ListedUserKey], error) {
			return ApiUserListUserKeys(inb, req)
		}).
		Extra(miso.ExtraName, "ApiUserListUserKeys").
		Desc("User list user keys").
		Resource(ResourceBasicUser)

	miso.IPost("/open/api/user/key/delete",
		func(inb *miso.Inbound, req vault.DeleteUserKeyReq) (any, error) {
			return ApiUserDeleteUserKey(inb, req)
		}).
		Extra(miso.ExtraName, "ApiUserDeleteUserKey").
		Desc("User delete user key").
		Resource(ResourceBasicUser)

	miso.IPost("/open/api/resource/add",
		func(inb *miso.Inbound, req vault.CreateResReq) (any, error) {
			return ApiAdminAddResource(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminAddResource").
		Desc("Admin add resource").
		Resource(ResourceManageResources)

	miso.IPost("/open/api/resource/remove",
		func(inb *miso.Inbound, req vault.DeleteResourceReq) (any, error) {
			return ApiAdminRemoveResource(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminRemoveResource").
		Desc("Admin remove resource").
		Resource(ResourceManageResources)

	miso.IGet("/open/api/resource/brief/candidates",
		func(inb *miso.Inbound, req ListResCandidatesReq) ([]vault.ResBrief, error) {
			return ApiListResCandidates(inb, req)
		}).
		Extra(miso.ExtraName, "ApiListResCandidates").
		Desc("List all resource candidates for role").
		Resource(ResourceManageResources)

	miso.IPost("/open/api/resource/list",
		func(inb *miso.Inbound, req vault.ListResReq) (vault.ListResResp, error) {
			return ApiAdminListRes(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminListRes").
		Desc("Admin list resources").
		Resource(ResourceManageResources)

	miso.Get("/open/api/resource/brief/user",
		func(inb *miso.Inbound) ([]vault.ResBrief, error) {
			return ApiListUserAccessibleRes(inb)
		}).
		Extra(miso.ExtraName, "ApiListUserAccessibleRes").
		Desc("List resources that are accessible to current user").
		Public()

	miso.Get("/open/api/resource/brief/all",
		func(inb *miso.Inbound) ([]vault.ResBrief, error) {
			return ApiListAllResBrief(inb)
		}).
		Extra(miso.ExtraName, "ApiListAllResBrief").
		Desc("List all resource brief info").
		Public()

	miso.IPost("/open/api/role/resource/add",
		func(inb *miso.Inbound, req vault.AddRoleResReq) (any, error) {
			return ApiAdminBindRoleRes(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminBindRoleRes").
		Desc("Admin add resource to role").
		Resource(ResourceManageResources)

	miso.IPost("/open/api/role/resource/remove",
		func(inb *miso.Inbound, req vault.RemoveRoleResReq) (any, error) {
			return ApiAdminUnbindRoleRes(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminUnbindRoleRes").
		Desc("Admin remove resource from role").
		Resource(ResourceManageResources)

	miso.IPost("/open/api/role/add",
		func(inb *miso.Inbound, req vault.AddRoleReq) (any, error) {
			return ApiAdminAddRole(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminAddRole").
		Desc("Admin add role").
		Resource(ResourceManageResources)

	miso.IPost("/open/api/role/list",
		func(inb *miso.Inbound, req vault.ListRoleReq) (vault.ListRoleResp, error) {
			return ApiAdminListRoles(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminListRoles").
		Desc("Admin list roles").
		Resource(ResourceManageResources)

	miso.Get("/open/api/role/brief/all",
		func(inb *miso.Inbound) ([]vault.RoleBrief, error) {
			return ApiAdminListRoleBriefs(inb)
		}).
		Extra(miso.ExtraName, "ApiAdminListRoleBriefs").
		Desc("Admin list role brief info").
		Resource(ResourceManageResources)

	miso.IPost("/open/api/role/resource/list",
		func(inb *miso.Inbound, req vault.ListRoleResReq) (vault.ListRoleResResp, error) {
			return ApiAdminListRoleRes(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminListRoleRes").
		Desc("Admin list resources of role").
		Resource(ResourceManageResources)

	miso.IPost("/open/api/role/info",
		func(inb *miso.Inbound, req api.RoleInfoReq) (api.RoleInfoResp, error) {
			return ApiGetRoleInfo(inb, req)
		}).
		Extra(miso.ExtraName, "ApiGetRoleInfo").
		Desc("Get role info").
		Public()

	miso.IPost("/open/api/path/list",
		func(inb *miso.Inbound, req vault.ListPathReq) (vault.ListPathResp, error) {
			return ApiAdminListPaths(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminListPaths").
		Desc("Admin list paths").
		Resource(ResourceManageResources)

	miso.IPost("/open/api/path/resource/bind",
		func(inb *miso.Inbound, req vault.BindPathResReq) (any, error) {
			return ApiAdminBindResPath(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminBindResPath").
		Desc("Admin bind resource to path").
		Resource(ResourceManageResources)

	miso.IPost("/open/api/path/resource/unbind",
		func(inb *miso.Inbound, req vault.UnbindPathResReq) (any, error) {
			return ApiAdminUnbindResPath(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminUnbindResPath").
		Desc("Admin unbind resource and path").
		Resource(ResourceManageResources)

	miso.IPost("/open/api/path/delete",
		func(inb *miso.Inbound, req vault.DeletePathReq) (any, error) {
			return ApiAdminDeletePath(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminDeletePath").
		Desc("Admin delete path").
		Resource(ResourceManageResources)

	miso.IPost("/open/api/path/update",
		func(inb *miso.Inbound, req vault.UpdatePathReq) (any, error) {
			return ApiAdminUpdatePath(inb, req)
		}).
		Extra(miso.ExtraName, "ApiAdminUpdatePath").
		Desc("Admin update path").
		Resource(ResourceManageResources)

	miso.IPost("/remote/user/info",
		func(inb *miso.Inbound, req api.FindUserReq) (api.UserInfo, error) {
			return ApiFetchUserInfo(inb, req)
		}).
		Extra(miso.ExtraName, "ApiFetchUserInfo").
		Desc("Fetch user info")

	miso.IGet("/remote/user/id",
		func(inb *miso.Inbound, req FetchUserIdByNameReq) (int, error) {
			return ApiFetchUserIdByName(inb, req)
		}).
		Extra(miso.ExtraName, "ApiFetchUserIdByName").
		Desc("Fetch id of user with the username")

	miso.IPost("/remote/user/userno/username",
		func(inb *miso.Inbound, req api.FetchNameByUserNoReq) (api.FetchUsernamesRes, error) {
			return ApiFetchUsernamesByNosEp(inb, req)
		}).
		Extra(miso.ExtraName, "ApiFetchUsernamesByNosEp").
		Desc("Fetch usernames of users with the userNos")

	miso.IPost("/remote/user/list/with-role",
		func(inb *miso.Inbound, req api.FetchUsersWithRoleReq) ([]api.UserInfo, error) {
			return ApiFindUserWithRoleEp(inb, req)
		}).
		Extra(miso.ExtraName, "ApiFindUserWithRoleEp").
		Desc("Fetch users with the role_no")

	miso.IPost("/remote/user/list/with-resource",
		func(inb *miso.Inbound, req api.FetchUserWithResourceReq) ([]api.UserInfo, error) {
			return ApiFindUserWithResourceEp(inb, req)
		}).
		Extra(miso.ExtraName, "ApiFindUserWithResourceEp").
		Desc("Fetch users that have access to the resource")

	miso.IPost("/remote/resource/add",
		func(inb *miso.Inbound, req vault.CreateResReq) (any, error) {
			return ApiReportResourceEp(inb, req)
		}).
		Extra(miso.ExtraName, "ApiReportResourceEp").
		Desc("Report resource. This endpoint should be used internally by another backend service.")

	miso.IPost("/remote/path/resource/access-test",
		func(inb *miso.Inbound, req api.CheckResAccessReq) (api.CheckResAccessResp, error) {
			return ApiCheckResourceAccessEp(inb, req)
		}).
		Extra(miso.ExtraName, "ApiCheckResourceAccessEp").
		Desc("Validate resource access")

	miso.IPost("/remote/path/add",
		func(inb *miso.Inbound, req vault.CreatePathReq) (any, error) {
			return ApiReportPath(inb, req)
		}).
		Extra(miso.ExtraName, "ApiReportPath").
		Desc("Report endpoint info").
		Resource(ResourceManageResources)

	miso.IPost("/open/api/password/list-site-passwords",
		func(inb *miso.Inbound, req vault.ListSitePasswordReq) (miso.PageRes[vault.ListSitePasswordRes], error) {
			return ApiListSitePasswords(inb.Rail(), req, common.GetUser(inb.Rail()), mysql.GetMySQL())
		}).
		Extra(miso.ExtraName, "ApiListSitePasswords").
		Desc("List site password records").
		Resource(ResourceBasicUser)

	miso.IPost("/open/api/password/add-site-password",
		func(inb *miso.Inbound, req vault.AddSitePasswordReq) (any, error) {
			return ApiAddSitePassword(inb.Rail(), req, common.GetUser(inb.Rail()), mysql.GetMySQL())
		}).
		Extra(miso.ExtraName, "ApiAddSitePassword").
		Desc("Add site password record").
		Resource(ResourceBasicUser)

	miso.IPost("/open/api/password/remove-site-password",
		func(inb *miso.Inbound, req vault.RemoveSitePasswordRes) (any, error) {
			return ApiRemoveSitePassword(inb.Rail(), req, common.GetUser(inb.Rail()), mysql.GetMySQL())
		}).
		Extra(miso.ExtraName, "ApiRemoveSitePassword").
		Desc("Remove site password record").
		Resource(ResourceBasicUser)

	miso.IPost("/open/api/password/decrypt-site-password",
		func(inb *miso.Inbound, req vault.DecryptSitePasswordReq) (vault.DecryptSitePasswordRes, error) {
			return ApiDecryptSitePassword(inb.Rail(), req, common.GetUser(inb.Rail()), mysql.GetMySQL())
		}).
		Extra(miso.ExtraName, "ApiDecryptSitePassword").
		Desc("Decrypt site password").
		Resource(ResourceBasicUser)

	miso.IPost("/open/api/password/edit-site-password",
		func(inb *miso.Inbound, req vault.EditSitePasswordReq) (any, error) {
			return ApiEditSitePassword(inb.Rail(), req, common.GetUser(inb.Rail()), mysql.GetMySQL())
		}).
		Extra(miso.ExtraName, "ApiEditSitePassword").
		Desc("Edit site password").
		Resource(ResourceBasicUser)

	miso.IPost("/open/api/user/clear-failed-login-attempts",
		func(inb *miso.Inbound, req vault.ClearUserFailedLoginAttemptsReq) (any, error) {
			return nil, ApiClearUserFailedLoginAttempts(inb.Rail(), req)
		}).
		Extra(miso.ExtraName, "ApiClearUserFailedLoginAttempts").
		Desc("Admin clear user's failed login attempts").
		Resource(ResourceManagerUser)

}
