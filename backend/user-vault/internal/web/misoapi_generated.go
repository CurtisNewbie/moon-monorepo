// auto generated by misoapi v0.3.0 at 2025/09/23 23:30:24 (CST), please do not modify
package web

import (
	"github.com/curtisnewbie/miso/middleware/dbquery"
	"github.com/curtisnewbie/miso/middleware/user-vault/common"
	"github.com/curtisnewbie/miso/miso"
	"github.com/curtisnewbie/user-vault/api"
	"github.com/curtisnewbie/user-vault/internal/note"
	"github.com/curtisnewbie/user-vault/internal/vault"
)

func init() {
	miso.HttpPost("/open/api/user/login", miso.AutoHandler(
		func(inb *miso.Inbound, req LoginReq) (string, error) {
			return ApiUserLogin(inb, req)
		})).
		Extra(miso.ExtraName, "ApiUserLogin").
		Desc(`User Login using password, a JWT token is generated and returned`).
		Public()

	miso.HttpPost("/open/api/user/register/request", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.RegisterReq) (any, error) {
			return ApiUserRegister(inb, req)
		})).
		Extra(miso.ExtraName, "ApiUserRegister").
		Desc(`User request registration, approval needed`).
		Public()

	miso.HttpPost("/open/api/user/add", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.AddUserParam) (any, error) {
			return ApiAdminAddUser(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminAddUser").
		Desc(`Admin create new user`).
		Resource(ResourceManagerUser)

	miso.HttpPost("/open/api/user/list", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.ListUserReq) (miso.PageRes[vault.UserInfo], error) {
			return ApiAdminListUsers(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminListUsers").
		Desc(`Admin list users`).
		Resource(ResourceManagerUser)

	miso.HttpPost("/open/api/user/info/update", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.AdminUpdateUserReq) (any, error) {
			return ApiAdminUpdateUser(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminUpdateUser").
		Desc(`Admin update user info`).
		Resource(ResourceManagerUser)

	miso.HttpPost("/open/api/user/registration/review", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.AdminReviewUserReq) (any, error) {
			return ApiAdminReviewUser(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminReviewUser").
		Desc(`Admin review user registration`).
		Resource(ResourceManagerUser)

	miso.HttpGet("/open/api/user/info", miso.ResHandler(
		func(inb *miso.Inbound) (UserInfoRes, error) {
			return ApiUserGetUserInfo(inb)
		})).
		Extra(miso.ExtraName, "ApiUserGetUserInfo").
		Desc(`User get user info`).
		Public()

	miso.HttpPost("/open/api/user/password/update", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.UpdatePasswordReq) (any, error) {
			return ApiUserUpdatePassword(inb, req)
		})).
		Extra(miso.ExtraName, "ApiUserUpdatePassword").
		Desc(`User update password`).
		Resource(ResourceBasicUser)

	miso.HttpPost("/open/api/token/exchange", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.ExchangeTokenReq) (string, error) {
			return ExchangeTokenEp(inb, req)
		})).
		Extra(miso.ExtraName, "ExchangeTokenEp").
		Desc(`Exchange token`).
		Public()

	miso.HttpGet("/open/api/token/user", miso.AutoHandler(
		func(inb *miso.Inbound, req GetTokenUserReq) (vault.UserInfoBrief, error) {
			return ApiGetTokenUserInfo(inb, req)
		})).
		Extra(miso.ExtraName, "ApiGetTokenUserInfo").
		Desc(`Get user info by token. This endpoint is expected to be accessible publicly`).
		Public()

	miso.HttpPost("/open/api/access/history", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.ListAccessLogReq) (miso.PageRes[vault.ListedAccessLog], error) {
			return ApiUserListAccessHistory(inb, req)
		})).
		Extra(miso.ExtraName, "ApiUserListAccessHistory").
		Desc(`User list access logs`).
		Resource(ResourceBasicUser)

	miso.HttpPost("/open/api/user/key/generate", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.GenUserKeyReq) (any, error) {
			return ApiUserGenUserKey(inb, req)
		})).
		Extra(miso.ExtraName, "ApiUserGenUserKey").
		Desc(`User generate user key`).
		Resource(ResourceBasicUser)

	miso.HttpPost("/open/api/user/key/list", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.ListUserKeysReq) (miso.PageRes[vault.ListedUserKey], error) {
			return ApiUserListUserKeys(inb, req)
		})).
		Extra(miso.ExtraName, "ApiUserListUserKeys").
		Desc(`User list user keys`).
		Resource(ResourceBasicUser)

	miso.HttpPost("/open/api/user/key/delete", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.DeleteUserKeyReq) (any, error) {
			return ApiUserDeleteUserKey(inb, req)
		})).
		Extra(miso.ExtraName, "ApiUserDeleteUserKey").
		Desc(`User delete user key`).
		Resource(ResourceBasicUser)

	miso.HttpPost("/open/api/resource/add", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.CreateResReq) (any, error) {
			return ApiAdminAddResource(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminAddResource").
		Desc(`Admin add resource`).
		Resource(ResourceManageResources)

	miso.HttpPost("/open/api/resource/remove", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.DeleteResourceReq) (any, error) {
			return ApiAdminRemoveResource(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminRemoveResource").
		Desc(`Admin remove resource`).
		Resource(ResourceManageResources)

	miso.HttpGet("/open/api/resource/brief/candidates", miso.AutoHandler(
		func(inb *miso.Inbound, req ListResCandidatesReq) ([]vault.ResBrief, error) {
			return ApiListResCandidates(inb, req)
		})).
		Extra(miso.ExtraName, "ApiListResCandidates").
		Desc(`List all resource candidates for role`).
		Resource(ResourceManageResources)

	miso.HttpPost("/open/api/resource/list", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.ListResReq) (vault.ListResResp, error) {
			return ApiAdminListRes(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminListRes").
		Desc(`Admin list resources`).
		Resource(ResourceManageResources)

	miso.HttpGet("/open/api/resource/brief/user", miso.ResHandler(
		func(inb *miso.Inbound) ([]vault.ResBrief, error) {
			return ApiListUserAccessibleRes(inb)
		})).
		Extra(miso.ExtraName, "ApiListUserAccessibleRes").
		Desc(`List resources that are accessible to current user`).
		Public()

	miso.HttpGet("/open/api/resource/brief/all", miso.ResHandler(
		func(inb *miso.Inbound) ([]vault.ResBrief, error) {
			return ApiListAllResBrief(inb)
		})).
		Extra(miso.ExtraName, "ApiListAllResBrief").
		Desc(`List all resource brief info`).
		Public()

	miso.HttpPost("/open/api/role/resource/add", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.AddRoleResReq) (any, error) {
			return ApiAdminBindRoleRes(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminBindRoleRes").
		Desc(`Admin add resource to role`).
		Resource(ResourceManageResources)

	miso.HttpPost("/open/api/role/resource/remove", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.RemoveRoleResReq) (any, error) {
			return ApiAdminUnbindRoleRes(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminUnbindRoleRes").
		Desc(`Admin remove resource from role`).
		Resource(ResourceManageResources)

	miso.HttpPost("/open/api/role/add", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.AddRoleReq) (any, error) {
			return ApiAdminAddRole(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminAddRole").
		Desc(`Admin add role`).
		Resource(ResourceManageResources)

	miso.HttpPost("/open/api/role/list", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.ListRoleReq) (vault.ListRoleResp, error) {
			return ApiAdminListRoles(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminListRoles").
		Desc(`Admin list roles`).
		Resource(ResourceManageResources)

	miso.HttpGet("/open/api/role/brief/all", miso.ResHandler(
		func(inb *miso.Inbound) ([]vault.RoleBrief, error) {
			return ApiAdminListRoleBriefs(inb)
		})).
		Extra(miso.ExtraName, "ApiAdminListRoleBriefs").
		Desc(`Admin list role brief info`).
		Resource(ResourceManageResources)

	miso.HttpPost("/open/api/role/resource/list", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.ListRoleResReq) (vault.ListRoleResResp, error) {
			return ApiAdminListRoleRes(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminListRoleRes").
		Desc(`Admin list resources of role`).
		Resource(ResourceManageResources)

	miso.HttpPost("/open/api/role/info", miso.AutoHandler(
		func(inb *miso.Inbound, req api.RoleInfoReq) (api.RoleInfoResp, error) {
			return ApiGetRoleInfo(inb, req)
		})).
		Extra(miso.ExtraName, "ApiGetRoleInfo").
		Desc(`Get role info`).
		Public()

	miso.HttpPost("/open/api/path/list", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.ListPathReq) (vault.ListPathResp, error) {
			return ApiAdminListPaths(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminListPaths").
		Desc(`Admin list paths`).
		Resource(ResourceManageResources)

	miso.HttpPost("/open/api/path/resource/bind", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.BindPathResReq) (any, error) {
			return ApiAdminBindResPath(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminBindResPath").
		Desc(`Admin bind resource to path`).
		Resource(ResourceManageResources)

	miso.HttpPost("/open/api/path/resource/unbind", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.UnbindPathResReq) (any, error) {
			return ApiAdminUnbindResPath(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminUnbindResPath").
		Desc(`Admin unbind resource and path`).
		Resource(ResourceManageResources)

	miso.HttpPost("/open/api/path/delete", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.DeletePathReq) (any, error) {
			return ApiAdminDeletePath(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminDeletePath").
		Desc(`Admin delete path`).
		Resource(ResourceManageResources)

	miso.HttpPost("/open/api/path/update", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.UpdatePathReq) (any, error) {
			return ApiAdminUpdatePath(inb, req)
		})).
		Extra(miso.ExtraName, "ApiAdminUpdatePath").
		Desc(`Admin update path`).
		Resource(ResourceManageResources)

	miso.HttpPost("/remote/user/info", miso.AutoHandler(
		func(inb *miso.Inbound, req api.FindUserReq) (vault.UserInfo, error) {
			return ApiFetchUserInfo(inb, req)
		})).
		Extra(miso.ExtraName, "ApiFetchUserInfo").
		Desc(`Fetch user info`)

	miso.HttpPost("/internal/v1/user/info/common", miso.AutoHandler(
		func(inb *miso.Inbound, req api.FindUserReq) (common.User, error) {
			return ApiSysFetchUserInfo(inb, req)
		})).
		Extra(miso.ExtraName, "ApiSysFetchUserInfo").
		Desc(`System fetch user info as common.User`)

	miso.HttpGet("/remote/user/id", miso.AutoHandler(
		func(inb *miso.Inbound, req FetchUserIdByNameReq) (int, error) {
			return ApiFetchUserIdByName(inb, req)
		})).
		Extra(miso.ExtraName, "ApiFetchUserIdByName").
		Desc(`Fetch id of user with the username`)

	miso.HttpPost("/remote/user/userno/username", miso.AutoHandler(
		func(inb *miso.Inbound, req api.FetchNameByUserNoReq) (api.FetchUsernamesRes, error) {
			return ApiFetchUsernamesByNosEp(inb, req)
		})).
		Extra(miso.ExtraName, "ApiFetchUsernamesByNosEp").
		Desc(`Fetch usernames of users with the userNos`)

	miso.HttpPost("/remote/user/list/with-role", miso.AutoHandler(
		func(inb *miso.Inbound, req api.FetchUsersWithRoleReq) ([]vault.UserInfo, error) {
			return ApiFindUserWithRoleEp(inb, req)
		})).
		Extra(miso.ExtraName, "ApiFindUserWithRoleEp").
		Desc(`Fetch users with the role_no`)

	miso.HttpPost("/remote/user/list/with-resource", miso.AutoHandler(
		func(inb *miso.Inbound, req api.FetchUserWithResourceReq) ([]vault.UserInfo, error) {
			return ApiFindUserWithResourceEp(inb, req)
		})).
		Extra(miso.ExtraName, "ApiFindUserWithResourceEp").
		Desc(`Fetch users that have access to the resource`)

	miso.HttpPost("/remote/resource/add", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.CreateResReq) (any, error) {
			return ApiReportResourceEp(inb, req)
		})).
		Extra(miso.ExtraName, "ApiReportResourceEp").
		Desc(`Report resource. This endpoint should be used internally by another backend service.`)

	miso.HttpPost("/remote/path/resource/access-test", miso.AutoHandler(
		func(inb *miso.Inbound, req api.CheckResAccessReq) (api.CheckResAccessResp, error) {
			return ApiCheckResourceAccessEp(inb, req)
		})).
		Extra(miso.ExtraName, "ApiCheckResourceAccessEp").
		Desc(`Validate resource access`)

	miso.HttpPost("/remote/path/add", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.CreatePathReq) (any, error) {
			return ApiReportPath(inb, req)
		})).
		Extra(miso.ExtraName, "ApiReportPath").
		Desc(`Report endpoint info`).
		Resource(ResourceManageResources)

	miso.HttpPost("/open/api/password/list-site-passwords", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.ListSitePasswordReq) (miso.PageRes[vault.ListSitePasswordRes], error) {
			return ApiListSitePasswords(inb.Rail(), req, common.GetUser(inb.Rail()), dbquery.GetDB())
		})).
		Extra(miso.ExtraName, "ApiListSitePasswords").
		Desc(`List site password records`).
		Resource(ResourceBasicUser)

	miso.HttpPost("/open/api/password/add-site-password", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.AddSitePasswordReq) (any, error) {
			return ApiAddSitePassword(inb.Rail(), req, common.GetUser(inb.Rail()), dbquery.GetDB())
		})).
		Extra(miso.ExtraName, "ApiAddSitePassword").
		Desc(`Add site password record`).
		Resource(ResourceBasicUser)

	miso.HttpPost("/open/api/password/remove-site-password", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.RemoveSitePasswordRes) (any, error) {
			return ApiRemoveSitePassword(inb.Rail(), req, common.GetUser(inb.Rail()), dbquery.GetDB())
		})).
		Extra(miso.ExtraName, "ApiRemoveSitePassword").
		Desc(`Remove site password record`).
		Resource(ResourceBasicUser)

	miso.HttpPost("/open/api/password/decrypt-site-password", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.DecryptSitePasswordReq) (vault.DecryptSitePasswordRes, error) {
			return ApiDecryptSitePassword(inb.Rail(), req, common.GetUser(inb.Rail()), dbquery.GetDB())
		})).
		Extra(miso.ExtraName, "ApiDecryptSitePassword").
		Desc(`Decrypt site password`).
		Resource(ResourceBasicUser)

	miso.HttpPost("/open/api/password/edit-site-password", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.EditSitePasswordReq) (any, error) {
			return ApiEditSitePassword(inb.Rail(), req, common.GetUser(inb.Rail()), dbquery.GetDB())
		})).
		Extra(miso.ExtraName, "ApiEditSitePassword").
		Desc(`Edit site password`).
		Resource(ResourceBasicUser)

	miso.HttpPost("/open/api/user/clear-failed-login-attempts", miso.AutoHandler(
		func(inb *miso.Inbound, req vault.ClearUserFailedLoginAttemptsReq) (any, error) {
			return nil, ApiClearUserFailedLoginAttempts(inb.Rail(), req)
		})).
		Extra(miso.ExtraName, "ApiClearUserFailedLoginAttempts").
		Desc(`Admin clear user's failed login attempts`).
		Resource(ResourceManagerUser)

	miso.HttpPost("/open/api/note/list-notes", miso.AutoHandler(
		func(inb *miso.Inbound, req note.ListNoteReq) (miso.PageRes[note.Note], error) {
			return ApiListNotes(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiListNotes").
		Extra(miso.ExtraNgTable, true).
		Desc(`List User Notes`).
		Resource(ResourceBasicUser)

	miso.HttpPost("/open/api/note/save-note", miso.AutoHandler(
		func(inb *miso.Inbound, req note.SaveNoteReq) (any, error) {
			return nil, ApiSaveNote(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiSaveNote").
		Desc(`User Save Note`).
		Resource(ResourceBasicUser)

	miso.HttpPost("/open/api/note/update-note", miso.AutoHandler(
		func(inb *miso.Inbound, req note.UpdateNoteReq) (any, error) {
			return nil, ApiUpdateNote(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiUpdateNote").
		Desc(`User Update Note`).
		Resource(ResourceBasicUser)

	miso.HttpPost("/open/api/note/delete-note", miso.AutoHandler(
		func(inb *miso.Inbound, req ApiDeleteNoteReq) (any, error) {
			return nil, ApiDeleteNote(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiDeleteNote").
		Desc(`User Delete Note`).
		Resource(ResourceBasicUser)

}
