// auto generated by misoapi v0.1.14 at 2025/03/09 17:04:12 (CST), please do not modify
package vfm

import (
	"github.com/curtisnewbie/miso/middleware/mysql"
	"github.com/curtisnewbie/miso/middleware/user-vault/common"
	"github.com/curtisnewbie/miso/miso"
)

func init() {
	miso.IGet("/open/api/file/upload/duplication/preflight",
		func(inb *miso.Inbound, req PreflightCheckReq) (bool, error) {
			return ApiPreflightCheckDuplicate(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiPreflightCheckDuplicate").
		Desc("Preflight check for duplicate file uploads").
		Resource(ResManageFiles)

	miso.IGet("/open/api/file/parent",
		func(inb *miso.Inbound, req FetchParentFileReq) (*ParentFileInfo, error) {
			return ApiGetParentFile(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiGetParentFile").
		Desc("User fetch parent file info").
		Resource(ResManageFiles)

	miso.IPost("/open/api/file/move-to-dir",
		func(inb *miso.Inbound, req MoveIntoDirReq) (any, error) {
			return ApiMoveFileToDir(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiMoveFileToDir").
		Desc("User move file into directory").
		Resource(ResManageFiles)

	miso.IPost("/open/api/file/batch-move-to-dir",
		func(inb *miso.Inbound, req BatchMoveIntoDirReq) (any, error) {
			return ApiBatchMoveFileToDir(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiBatchMoveFileToDir").
		Desc("User move files into directory").
		Resource(ResManageFiles)

	miso.IPost("/open/api/file/make-dir",
		func(inb *miso.Inbound, req MakeDirReq) (string, error) {
			return ApiMakeDir(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiMakeDir").
		Desc("User make directory").
		Resource(ResManageFiles)

	miso.Get("/open/api/file/dir/list",
		func(inb *miso.Inbound) ([]ListedDir, error) {
			return ApiListDir(inb.Rail(), mysql.GetMySQL(), common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiListDir").
		Desc("User list directories").
		Resource(ResManageFiles)

	miso.IPost("/open/api/file/list",
		func(inb *miso.Inbound, req ListFileReq) (miso.PageRes[ListedFile], error) {
			return ApiListFiles(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiListFiles").
		Desc("User list files").
		Resource(ResManageFiles)

	miso.IPost("/open/api/file/delete",
		func(inb *miso.Inbound, req DeleteFileReq) (any, error) {
			return ApiDeleteFiles(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiDeleteFiles").
		Desc("User delete file").
		Resource(ResManageFiles)

	miso.IPost("/open/api/file/dir/truncate",
		func(inb *miso.Inbound, req DeleteFileReq) (any, error) {
			return ApiTruncateDir(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiTruncateDir").
		Desc("User delete truncate directory recursively").
		Resource(ResManageFiles)

	miso.IPost("/open/api/file/dir/bottom-up-tree",
		func(inb *miso.Inbound, req FetchDirTreeReq) (*DirBottomUpTreeNode, error) {
			return ApiFetchDirBottomUpTree(inb, mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiFetchDirBottomUpTree").
		Desc("Fetch directory tree bottom up.").
		Resource(ResManageFiles)

	miso.Get("/open/api/file/dir/top-down-tree",
		func(inb *miso.Inbound) (*DirTopDownTreeNode, error) {
			return ApiFetchDirTopDownTree(inb, mysql.GetMySQL(), common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiFetchDirTopDownTree").
		Desc("Fetch directory tree top down.").
		Resource(ResManageFiles)

	miso.IPost("/open/api/file/delete/batch",
		func(inb *miso.Inbound, req BatchDeleteFileReq) (any, error) {
			return ApiBatchDeleteFile(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiBatchDeleteFile").
		Desc("User delete file in batch").
		Resource(ResManageFiles)

	miso.IPost("/open/api/file/create",
		func(inb *miso.Inbound, req CreateFileReq) (any, error) {
			return ApiCreateFile(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiCreateFile").
		Desc("User create file").
		Resource(ResManageFiles)

	miso.IPost("/open/api/file/info/update",
		func(inb *miso.Inbound, req UpdateFileReq) (any, error) {
			return ApiUpdateFile(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiUpdateFile").
		Desc("User update file").
		Resource(ResManageFiles)

	miso.IPost("/open/api/file/token/generate",
		func(inb *miso.Inbound, req GenerateTempTokenReq) (string, error) {
			return ApiGenFileTkn(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiGenFileTkn").
		Desc("User generate temporary token").
		Resource(ResManageFiles)

	miso.IPost("/open/api/file/unpack",
		func(inb *miso.Inbound, req UnpackZipReq) (any, error) {
			return ApiUnpackZip(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiUnpackZip").
		Desc("User unpack zip").
		Resource(ResManageFiles)

	miso.RawGet("/open/api/file/token/qrcode", ApiGenFileTknQRCode).
		Extra(miso.ExtraName, "ApiGenFileTknQRCode").
		Desc("User generate qrcode image for temporary token").
		Public().
		DocQueryParam("token", "Generated temporary file key")

	miso.Get("/open/api/vfolder/brief/owned",
		func(inb *miso.Inbound) ([]VFolderBrief, error) {
			return ApiListVFolderBrief(inb.Rail(), mysql.GetMySQL(), common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiListVFolderBrief").
		Desc("User list virtual folder briefs").
		Resource(ResManageFiles)

	miso.IPost("/open/api/vfolder/list",
		func(inb *miso.Inbound, req ListVFolderReq) (ListVFolderRes, error) {
			return ApiListVFolders(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiListVFolders").
		Desc("User list virtual folders").
		Resource(ResManageFiles)

	miso.IPost("/open/api/vfolder/create",
		func(inb *miso.Inbound, req CreateVFolderReq) (string, error) {
			return ApiCreateVFolder(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiCreateVFolder").
		Desc("User create virtual folder").
		Resource(ResManageFiles)

	miso.IPost("/open/api/vfolder/file/add",
		func(inb *miso.Inbound, req AddFileToVfolderReq) (any, error) {
			return ApiVFolderAddFile(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiVFolderAddFile").
		Desc("User add file to virtual folder").
		Resource(ResManageFiles)

	miso.IPost("/open/api/vfolder/file/remove",
		func(inb *miso.Inbound, req RemoveFileFromVfolderReq) (any, error) {
			return ApiVFolderRemoveFile(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiVFolderRemoveFile").
		Desc("User remove file from virtual folder").
		Resource(ResManageFiles)

	miso.IPost("/open/api/vfolder/share",
		func(inb *miso.Inbound, req ShareVfolderReq) (any, error) {
			return ApiShareVFolder(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiShareVFolder").
		Desc("Share access to virtual folder").
		Resource(ResManageFiles)

	miso.IPost("/open/api/vfolder/access/remove",
		func(inb *miso.Inbound, req RemoveGrantedFolderAccessReq) (any, error) {
			return ApiRemoveVFolderAccess(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiRemoveVFolderAccess").
		Desc("Remove granted access to virtual folder").
		Resource(ResManageFiles)

	miso.IPost("/open/api/vfolder/granted/list",
		func(inb *miso.Inbound, req ListGrantedFolderAccessReq) (ListGrantedFolderAccessRes, error) {
			return ApiListVFolderAccess(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiListVFolderAccess").
		Desc("List granted access to virtual folder").
		Resource(ResManageFiles)

	miso.IPost("/open/api/vfolder/remove",
		func(inb *miso.Inbound, req RemoveVFolderReq) (any, error) {
			return ApiRemoveVFolder(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiRemoveVFolder").
		Desc("Remove virtual folder").
		Resource(ResManageFiles)

	miso.Get("/open/api/gallery/brief/owned",
		func(inb *miso.Inbound) ([]VGalleryBrief, error) {
			return ApiListGalleryBriefs(inb.Rail(), mysql.GetMySQL(), common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiListGalleryBriefs").
		Desc("List owned gallery brief info").
		Resource(ResManageFiles)

	miso.IPost("/open/api/gallery/new",
		func(inb *miso.Inbound, req CreateGalleryCmd) (*Gallery, error) {
			return ApiCreateGallery(inb.Rail(), req, mysql.GetMySQL(), common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiCreateGallery").
		Desc("Create new gallery").
		Resource(ResManageFiles)

	miso.IPost("/open/api/gallery/update",
		func(inb *miso.Inbound, req UpdateGalleryCmd) (any, error) {
			return ApiUpdateGallery(inb.Rail(), req, mysql.GetMySQL(), common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiUpdateGallery").
		Desc("Update gallery").
		Resource(ResManageFiles)

	miso.IPost("/open/api/gallery/delete",
		func(inb *miso.Inbound, req DeleteGalleryCmd) (any, error) {
			return ApiDeleteGallery(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiDeleteGallery").
		Desc("Delete gallery").
		Resource(ResManageFiles)

	miso.IPost("/open/api/gallery/list",
		func(inb *miso.Inbound, req ListGalleriesCmd) (miso.PageRes[VGallery], error) {
			return ApiListGalleries(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiListGalleries").
		Desc("List galleries").
		Resource(ResManageFiles)

	miso.IPost("/open/api/gallery/access/grant",
		func(inb *miso.Inbound, req PermitGalleryAccessCmd) (any, error) {
			return ApiGranteGalleryAccess(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiGranteGalleryAccess").
		Desc("Grant access to the galleries").
		Resource(ResManageFiles)

	miso.IPost("/open/api/gallery/access/remove",
		func(inb *miso.Inbound, req RemoveGalleryAccessCmd) (any, error) {
			return ApiRemoveGalleryAccess(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiRemoveGalleryAccess").
		Desc("Remove access to the galleries").
		Resource(ResManageFiles)

	miso.IPost("/open/api/gallery/access/list",
		func(inb *miso.Inbound, req ListGrantedGalleryAccessCmd) (miso.PageRes[ListedGalleryAccessRes], error) {
			return ApiListGalleryAccess(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiListGalleryAccess").
		Desc("List granted access to the galleries").
		Resource(ResManageFiles)

	miso.IPost("/open/api/gallery/images",
		func(inb *miso.Inbound, req ListGalleryImagesCmd) (*ListGalleryImagesResp, error) {
			return ApiListGalleryImages(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiListGalleryImages").
		Desc("List images of gallery").
		Resource(ResManageFiles)

	miso.IPost("/open/api/gallery/image/transfer",
		func(inb *miso.Inbound, req TransferGalleryImageReq) (any, error) {
			return ApiTransferGalleryImage(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiTransferGalleryImage").
		Desc("Host selected images on gallery").
		Resource(ResManageFiles)

	miso.IPost("/open/api/versioned-file/list",
		func(inb *miso.Inbound, req ApiListVerFileReq) (miso.PageRes[ApiListVerFileRes], error) {
			return ApiListVersionedFile(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiListVersionedFile").
		Desc("List versioned files").
		Resource(ResManageFiles)

	miso.IPost("/open/api/versioned-file/history",
		func(inb *miso.Inbound, req ApiListVerFileHistoryReq) (miso.PageRes[ApiListVerFileHistoryRes], error) {
			return ApiListVersionedFileHistory(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiListVersionedFileHistory").
		Desc("List versioned file history").
		Resource(ResManageFiles)

	miso.IPost("/open/api/versioned-file/accumulated-size",
		func(inb *miso.Inbound, req ApiQryVerFileAccuSizeReq) (ApiQryVerFileAccuSizeRes, error) {
			return ApiQryVersionedFileAccuSize(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiQryVersionedFileAccuSize").
		Desc("Query versioned file log accumulated size").
		Resource(ResManageFiles)

	miso.IPost("/open/api/versioned-file/create",
		func(inb *miso.Inbound, req ApiCreateVerFileReq) (ApiCreateVerFileRes, error) {
			return ApiCreateVersionedFile(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiCreateVersionedFile").
		Desc("Create versioned file").
		Resource(ResManageFiles)

	miso.IPost("/open/api/versioned-file/update",
		func(inb *miso.Inbound, req ApiUpdateVerFileReq) (any, error) {
			return ApiUpdateVersionedFile(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiUpdateVersionedFile").
		Desc("Update versioned file").
		Resource(ResManageFiles)

	miso.IPost("/open/api/versioned-file/delete",
		func(inb *miso.Inbound, req ApiDelVerFileReq) (any, error) {
			return ApiDelVersionedFile(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiDelVersionedFile").
		Desc("Delete versioned file").
		Resource(ResManageFiles)

	miso.Post("/compensate/thumbnail",
		func(inb *miso.Inbound) (any, error) {
			return ApiCompensateThumbnail(inb.Rail(), mysql.GetMySQL())
		}).
		Extra(miso.ExtraName, "ApiCompensateThumbnail").
		Desc("Compensate thumbnail generation").
		Resource(ResVfmMaintenance)

	miso.Post("/compensate/regenerate-video-thumbnails",
		func(inb *miso.Inbound) (any, error) {
			return nil, ApiRegenerateVideoThumbnail(inb.Rail(), mysql.GetMySQL())
		}).
		Extra(miso.ExtraName, "ApiRegenerateVideoThumbnail").
		Desc("Regenerate video thumbnails").
		Resource(ResVfmMaintenance)

	miso.Put("/bookmark/file/upload",
		func(inb *miso.Inbound) (any, error) {
			return ApiUploadBookmarkFile(inb, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiUploadBookmarkFile").
		Desc("Upload bookmark file").
		Resource(ResManageBookmark)

	miso.IPost("/bookmark/list",
		func(inb *miso.Inbound, req ListBookmarksReq) (any, error) {
			return ApiListBookmarks(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiListBookmarks").
		Desc("List bookmarks").
		Resource(ResManageBookmark)

	miso.IPost("/bookmark/remove",
		func(inb *miso.Inbound, req RemoveBookmarkReq) (any, error) {
			return ApiRemoveBookmark(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiRemoveBookmark").
		Desc("Remove bookmark").
		Resource(ResManageBookmark)

	miso.IPost("/bookmark/blacklist/list",
		func(inb *miso.Inbound, req ListBookmarksReq) (any, error) {
			return ApiListBlacklistedBookmarks(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiListBlacklistedBookmarks").
		Desc("List bookmark blacklist").
		Resource(ResManageBookmark)

	miso.IPost("/bookmark/blacklist/remove",
		func(inb *miso.Inbound, req RemoveBookmarkReq) (any, error) {
			return ApiRemoveBookmarkBlacklist(inb.Rail(), mysql.GetMySQL(), req, common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiRemoveBookmarkBlacklist").
		Desc("Remove bookmark blacklist").
		Resource(ResManageBookmark)

	miso.Get("/history/list-browse-history",
		func(inb *miso.Inbound) ([]ListBrowseRecordRes, error) {
			return ApiListBrowseHistory(inb.Rail(), mysql.GetMySQL(), common.GetUser(inb.Rail()))
		}).
		Extra(miso.ExtraName, "ApiListBrowseHistory").
		Desc("List user browse history").
		Resource(ResManageFiles)

	miso.IPost("/history/record-browse-history",
		func(inb *miso.Inbound, req RecordBrowseHistoryReq) (any, error) {
			return nil, ApiRecordBrowseHistory(inb.Rail(), mysql.GetMySQL(), common.GetUser(inb.Rail()), req)
		}).
		Extra(miso.ExtraName, "ApiRecordBrowseHistory").
		Desc("Record user browse history, only files that are directly owned by the user is recorded").
		Resource(ResManageFiles)

	miso.Get("/maintenance/status",
		func(inb *miso.Inbound) (MaintenanceStatus, error) {
			return ApiFetchMaintenanceStatus()
		}).
		Extra(miso.ExtraName, "ApiFetchMaintenanceStatus").
		Desc("Check server maintenance status").
		Resource(ResVfmMaintenance)

	miso.IPost("/internal/v1/file/create",
		func(inb *miso.Inbound, req SysCreateFileReq) (string, error) {
			return ApiSysCreateFile(inb.Rail(), mysql.GetMySQL(), req)
		}).
		Extra(miso.ExtraName, "ApiSysCreateFile").
		Desc("System create file")

	miso.IGet("/internal/file/upload/duplication/preflight",
		func(inb *miso.Inbound, req InternalCheckDuplicateReq) (bool, error) {
			return ApiInternalCheckDuplicate(inb.Rail(), mysql.GetMySQL(), req)
		}).
		Extra(miso.ExtraName, "ApiInternalCheckDuplicate").
		Desc("Internal endpoint, Preflight check for duplicate file uploads")

	miso.IPost("/internal/file/check-access",
		func(inb *miso.Inbound, req InternalCheckFileAccessReq) (any, error) {
			return nil, ApiInternalCheckFileAccess(inb.Rail(), mysql.GetMySQL(), req)
		}).
		Extra(miso.ExtraName, "ApiInternalCheckFileAccess").
		Desc("Internal endpoint, Check if user has access to the file")

}
