// auto generated by misoapi v0.2.0-beta.4 at 2025/07/07 22:46:07 (CST), please do not modify
package vfm

import (
	"github.com/curtisnewbie/miso/middleware/dbquery"
	"github.com/curtisnewbie/miso/middleware/user-vault/common"
	"github.com/curtisnewbie/miso/miso"
)

func init() {
	miso.HttpGet("/open/api/file/upload/duplication/preflight", miso.AutoHandler(
		func(inb *miso.Inbound, req PreflightCheckReq) (bool, error) {
			return ApiPreflightCheckDuplicate(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiPreflightCheckDuplicate").
		Desc(`Preflight check for duplicate file uploads`).
		Resource(ResManageFiles)

	miso.HttpGet("/open/api/file/parent", miso.AutoHandler(
		func(inb *miso.Inbound, req FetchParentFileReq) (*ParentFileInfo, error) {
			return ApiGetParentFile(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiGetParentFile").
		Desc(`User fetch parent file info`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/file/move-to-dir", miso.AutoHandler(
		func(inb *miso.Inbound, req MoveIntoDirReq) (any, error) {
			return ApiMoveFileToDir(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiMoveFileToDir").
		Desc(`User move file into directory`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/file/batch-move-to-dir", miso.AutoHandler(
		func(inb *miso.Inbound, req BatchMoveIntoDirReq) (any, error) {
			return ApiBatchMoveFileToDir(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiBatchMoveFileToDir").
		Desc(`User move files into directory`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/file/make-dir", miso.AutoHandler(
		func(inb *miso.Inbound, req MakeDirReq) (string, error) {
			return ApiMakeDir(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiMakeDir").
		Desc(`User make directory`).
		Resource(ResManageFiles)

	miso.HttpGet("/open/api/file/dir/list", miso.ResHandler(
		func(inb *miso.Inbound) ([]ListedDir, error) {
			return ApiListDir(inb.Rail(), dbquery.GetDB(), common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiListDir").
		Desc(`User list directories`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/file/list", miso.AutoHandler(
		func(inb *miso.Inbound, req ListFileReq) (miso.PageRes[ListedFile], error) {
			return ApiListFiles(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiListFiles").
		Desc(`User list files`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/file/delete", miso.AutoHandler(
		func(inb *miso.Inbound, req DeleteFileReq) (any, error) {
			return ApiDeleteFiles(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiDeleteFiles").
		Desc(`User delete file`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/file/dir/truncate", miso.AutoHandler(
		func(inb *miso.Inbound, req DeleteFileReq) (any, error) {
			return ApiTruncateDir(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiTruncateDir").
		Desc(`User delete truncate directory recursively`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/file/dir/bottom-up-tree", miso.AutoHandler(
		func(inb *miso.Inbound, req FetchDirTreeReq) (*DirBottomUpTreeNode, error) {
			return ApiFetchDirBottomUpTree(inb, dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiFetchDirBottomUpTree").
		Desc(`Fetch directory tree bottom up.`).
		Resource(ResManageFiles)

	miso.HttpGet("/open/api/file/dir/top-down-tree", miso.ResHandler(
		func(inb *miso.Inbound) (*DirTopDownTreeNode, error) {
			return ApiFetchDirTopDownTree(inb, dbquery.GetDB(), common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiFetchDirTopDownTree").
		Desc(`Fetch directory tree top down.`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/file/delete/batch", miso.AutoHandler(
		func(inb *miso.Inbound, req BatchDeleteFileReq) (any, error) {
			return ApiBatchDeleteFile(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiBatchDeleteFile").
		Desc(`User delete file in batch`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/file/create", miso.AutoHandler(
		func(inb *miso.Inbound, req CreateFileReq) (any, error) {
			return ApiCreateFile(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiCreateFile").
		Desc(`User create file`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/file/info/update", miso.AutoHandler(
		func(inb *miso.Inbound, req UpdateFileReq) (any, error) {
			return ApiUpdateFile(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiUpdateFile").
		Desc(`User update file`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/file/token/generate", miso.AutoHandler(
		func(inb *miso.Inbound, req GenerateTempTokenReq) (string, error) {
			return ApiGenFileTkn(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiGenFileTkn").
		Desc(`User generate temporary token`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/file/unpack", miso.AutoHandler(
		func(inb *miso.Inbound, req UnpackZipReq) (any, error) {
			return ApiUnpackZip(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiUnpackZip").
		Desc(`User unpack zip`).
		Resource(ResManageFiles)

	miso.HttpGet("/open/api/file/token/qrcode", miso.RawHandler(ApiGenFileTknQRCode)).
		Extra(miso.ExtraName, "ApiGenFileTknQRCode").
		Desc(`User generate qrcode image for temporary token`).
		Public().
		DocQueryParam("token", "Generated temporary file key")

	miso.HttpGet("/open/api/vfolder/brief/owned", miso.ResHandler(
		func(inb *miso.Inbound) ([]VFolderBrief, error) {
			return ApiListVFolderBrief(inb.Rail(), dbquery.GetDB(), common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiListVFolderBrief").
		Desc(`User list virtual folder briefs`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/vfolder/list", miso.AutoHandler(
		func(inb *miso.Inbound, req ListVFolderReq) (ListVFolderRes, error) {
			return ApiListVFolders(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiListVFolders").
		Desc(`User list virtual folders`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/vfolder/create", miso.AutoHandler(
		func(inb *miso.Inbound, req CreateVFolderReq) (string, error) {
			return ApiCreateVFolder(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiCreateVFolder").
		Desc(`User create virtual folder`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/vfolder/file/add", miso.AutoHandler(
		func(inb *miso.Inbound, req AddFileToVfolderReq) (any, error) {
			return ApiVFolderAddFile(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiVFolderAddFile").
		Desc(`User add file to virtual folder`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/vfolder/file/remove", miso.AutoHandler(
		func(inb *miso.Inbound, req RemoveFileFromVfolderReq) (any, error) {
			return ApiVFolderRemoveFile(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiVFolderRemoveFile").
		Desc(`User remove file from virtual folder`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/vfolder/share", miso.AutoHandler(
		func(inb *miso.Inbound, req ShareVfolderReq) (any, error) {
			return ApiShareVFolder(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiShareVFolder").
		Desc(`Share access to virtual folder`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/vfolder/access/remove", miso.AutoHandler(
		func(inb *miso.Inbound, req RemoveGrantedFolderAccessReq) (any, error) {
			return ApiRemoveVFolderAccess(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiRemoveVFolderAccess").
		Desc(`Remove granted access to virtual folder`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/vfolder/granted/list", miso.AutoHandler(
		func(inb *miso.Inbound, req ListGrantedFolderAccessReq) (ListGrantedFolderAccessRes, error) {
			return ApiListVFolderAccess(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiListVFolderAccess").
		Desc(`List granted access to virtual folder`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/vfolder/remove", miso.AutoHandler(
		func(inb *miso.Inbound, req RemoveVFolderReq) (any, error) {
			return ApiRemoveVFolder(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiRemoveVFolder").
		Desc(`Remove virtual folder`).
		Resource(ResManageFiles)

	miso.HttpGet("/open/api/gallery/brief/owned", miso.ResHandler(
		func(inb *miso.Inbound) ([]VGalleryBrief, error) {
			return ApiListGalleryBriefs(inb.Rail(), dbquery.GetDB(), common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiListGalleryBriefs").
		Desc(`List owned gallery brief info`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/gallery/new", miso.AutoHandler(
		func(inb *miso.Inbound, req CreateGalleryCmd) (*Gallery, error) {
			return ApiCreateGallery(inb.Rail(), req, dbquery.GetDB(), common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiCreateGallery").
		Desc(`Create new gallery`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/gallery/update", miso.AutoHandler(
		func(inb *miso.Inbound, req UpdateGalleryCmd) (any, error) {
			return ApiUpdateGallery(inb.Rail(), req, dbquery.GetDB(), common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiUpdateGallery").
		Desc(`Update gallery`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/gallery/delete", miso.AutoHandler(
		func(inb *miso.Inbound, req DeleteGalleryCmd) (any, error) {
			return ApiDeleteGallery(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiDeleteGallery").
		Desc(`Delete gallery`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/gallery/list", miso.AutoHandler(
		func(inb *miso.Inbound, req ListGalleriesCmd) (miso.PageRes[VGallery], error) {
			return ApiListGalleries(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiListGalleries").
		Desc(`List galleries`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/gallery/access/grant", miso.AutoHandler(
		func(inb *miso.Inbound, req PermitGalleryAccessCmd) (any, error) {
			return ApiGranteGalleryAccess(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiGranteGalleryAccess").
		Desc(`Grant access to the galleries`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/gallery/access/remove", miso.AutoHandler(
		func(inb *miso.Inbound, req RemoveGalleryAccessCmd) (any, error) {
			return ApiRemoveGalleryAccess(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiRemoveGalleryAccess").
		Desc(`Remove access to the galleries`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/gallery/access/list", miso.AutoHandler(
		func(inb *miso.Inbound, req ListGrantedGalleryAccessCmd) (miso.PageRes[ListedGalleryAccessRes], error) {
			return ApiListGalleryAccess(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiListGalleryAccess").
		Desc(`List granted access to the galleries`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/gallery/images", miso.AutoHandler(
		func(inb *miso.Inbound, req ListGalleryImagesCmd) (*ListGalleryImagesResp, error) {
			return ApiListGalleryImages(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiListGalleryImages").
		Desc(`List images of gallery`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/gallery/image/transfer", miso.AutoHandler(
		func(inb *miso.Inbound, req TransferGalleryImageReq) (any, error) {
			return ApiTransferGalleryImage(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiTransferGalleryImage").
		Desc(`Host selected images on gallery`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/versioned-file/list", miso.AutoHandler(
		func(inb *miso.Inbound, req ApiListVerFileReq) (miso.PageRes[ApiListVerFileRes], error) {
			return ApiListVersionedFile(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiListVersionedFile").
		Desc(`List versioned files`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/versioned-file/history", miso.AutoHandler(
		func(inb *miso.Inbound, req ApiListVerFileHistoryReq) (miso.PageRes[ApiListVerFileHistoryRes], error) {
			return ApiListVersionedFileHistory(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiListVersionedFileHistory").
		Desc(`List versioned file history`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/versioned-file/accumulated-size", miso.AutoHandler(
		func(inb *miso.Inbound, req ApiQryVerFileAccuSizeReq) (ApiQryVerFileAccuSizeRes, error) {
			return ApiQryVersionedFileAccuSize(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiQryVersionedFileAccuSize").
		Desc(`Query versioned file log accumulated size`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/versioned-file/create", miso.AutoHandler(
		func(inb *miso.Inbound, req ApiCreateVerFileReq) (ApiCreateVerFileRes, error) {
			return ApiCreateVersionedFile(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiCreateVersionedFile").
		Desc(`Create versioned file`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/versioned-file/update", miso.AutoHandler(
		func(inb *miso.Inbound, req ApiUpdateVerFileReq) (any, error) {
			return ApiUpdateVersionedFile(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiUpdateVersionedFile").
		Desc(`Update versioned file`).
		Resource(ResManageFiles)

	miso.HttpPost("/open/api/versioned-file/delete", miso.AutoHandler(
		func(inb *miso.Inbound, req ApiDelVerFileReq) (any, error) {
			return ApiDelVersionedFile(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiDelVersionedFile").
		Desc(`Delete versioned file`).
		Resource(ResManageFiles)

	miso.HttpPost("/compensate/thumbnail", miso.ResHandler(
		func(inb *miso.Inbound) (any, error) {
			return ApiCompensateThumbnail(inb.Rail(), dbquery.GetDB())
		})).
		Extra(miso.ExtraName, "ApiCompensateThumbnail").
		Desc(`Compensate thumbnail generation`).
		Resource(ResVfmMaintenance)

	miso.HttpPost("/compensate/regenerate-video-thumbnails", miso.ResHandler(
		func(inb *miso.Inbound) (any, error) {
			return nil, ApiRegenerateVideoThumbnail(inb.Rail(), dbquery.GetDB())
		})).
		Extra(miso.ExtraName, "ApiRegenerateVideoThumbnail").
		Desc(`Regenerate video thumbnails`).
		Resource(ResVfmMaintenance)

	miso.HttpPut("/bookmark/file/upload", miso.ResHandler(
		func(inb *miso.Inbound) (any, error) {
			return ApiUploadBookmarkFile(inb, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiUploadBookmarkFile").
		Desc(`Upload bookmark file`).
		Resource(ResManageBookmark)

	miso.HttpPost("/bookmark/list", miso.AutoHandler(
		func(inb *miso.Inbound, req ListBookmarksReq) (any, error) {
			return ApiListBookmarks(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiListBookmarks").
		Desc(`List bookmarks`).
		Resource(ResManageBookmark)

	miso.HttpPost("/bookmark/remove", miso.AutoHandler(
		func(inb *miso.Inbound, req RemoveBookmarkReq) (any, error) {
			return ApiRemoveBookmark(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiRemoveBookmark").
		Desc(`Remove bookmark`).
		Resource(ResManageBookmark)

	miso.HttpPost("/bookmark/blacklist/list", miso.AutoHandler(
		func(inb *miso.Inbound, req ListBookmarksReq) (any, error) {
			return ApiListBlacklistedBookmarks(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiListBlacklistedBookmarks").
		Desc(`List bookmark blacklist`).
		Resource(ResManageBookmark)

	miso.HttpPost("/bookmark/blacklist/remove", miso.AutoHandler(
		func(inb *miso.Inbound, req RemoveBookmarkReq) (any, error) {
			return ApiRemoveBookmarkBlacklist(inb.Rail(), dbquery.GetDB(), req, common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiRemoveBookmarkBlacklist").
		Desc(`Remove bookmark blacklist`).
		Resource(ResManageBookmark)

	miso.HttpGet("/history/list-browse-history", miso.ResHandler(
		func(inb *miso.Inbound) ([]ListBrowseRecordRes, error) {
			return ApiListBrowseHistory(inb.Rail(), dbquery.GetDB(), common.GetUser(inb.Rail()))
		})).
		Extra(miso.ExtraName, "ApiListBrowseHistory").
		Desc(`List user browse history`).
		Resource(ResManageFiles)

	miso.HttpPost("/history/record-browse-history", miso.AutoHandler(
		func(inb *miso.Inbound, req RecordBrowseHistoryReq) (any, error) {
			return nil, ApiRecordBrowseHistory(inb.Rail(), dbquery.GetDB(), common.GetUser(inb.Rail()), req)
		})).
		Extra(miso.ExtraName, "ApiRecordBrowseHistory").
		Desc(`Record user browse history, only files that are directly owned by the user is recorded`).
		Resource(ResManageFiles)

	miso.HttpGet("/maintenance/status", miso.ResHandler(
		func(inb *miso.Inbound) (MaintenanceStatus, error) {
			return ApiFetchMaintenanceStatus()
		})).
		Extra(miso.ExtraName, "ApiFetchMaintenanceStatus").
		Desc(`Check server maintenance status`).
		Resource(ResVfmMaintenance)

	miso.HttpPost("/internal/v1/file/create", miso.AutoHandler(
		func(inb *miso.Inbound, req SysCreateFileReq) (string, error) {
			return ApiSysCreateFile(inb.Rail(), dbquery.GetDB(), req)
		})).
		Extra(miso.ExtraName, "ApiSysCreateFile").
		Desc(`Internal endpoint, System create file`)

	miso.HttpGet("/internal/file/upload/duplication/preflight", miso.AutoHandler(
		func(inb *miso.Inbound, req InternalCheckDuplicateReq) (bool, error) {
			return ApiInternalCheckDuplicate(inb.Rail(), dbquery.GetDB(), req)
		})).
		Extra(miso.ExtraName, "ApiInternalCheckDuplicate").
		Desc(`Internal endpoint, Preflight check for duplicate file uploads`)

	miso.HttpPost("/internal/file/check-access", miso.AutoHandler(
		func(inb *miso.Inbound, req InternalCheckFileAccessReq) (any, error) {
			return nil, ApiInternalCheckFileAccess(inb.Rail(), dbquery.GetDB(), req)
		})).
		Extra(miso.ExtraName, "ApiInternalCheckFileAccess").
		Desc(`Internal endpoint, Check if user has access to the file`)

	miso.HttpPost("/internal/file/fetch-info", miso.AutoHandler(
		func(inb *miso.Inbound, req InternalFetchFileInfoReq) (InternalFetchFileInfoRes, error) {
			return ApiInternalFetchFileInfo(inb.Rail(), dbquery.GetDB(), req)
		})).
		Extra(miso.ExtraName, "ApiInternalFetchFileInfo").
		Desc(`Internal endpoint. Fetch file info.`)

	miso.HttpPost("/internal/v1/file/make-dir", miso.AutoHandler(
		func(inb *miso.Inbound, req SysMakeDirReq) (string, error) {
			return ApiSysMakeDir(inb.Rail(), dbquery.GetDB(), req)
		})).
		Extra(miso.ExtraName, "ApiSysMakeDir").
		Desc(`Internal endpoint, System make directory.`)

}
